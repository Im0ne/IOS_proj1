#!/bin/sh
#xonufr00 Ivan Onufriienko
export POSIXLY_CORRECT=yes
export LC_ALL=C
# Constants
MOLE_RC="$HOME/.mole_rc"
EDITOR="${EDITOR:-${VISUAL:-vi}}"
usage(){
    echo "Usage: $(basename "$0") [-h]"
    echo "       $(basename "$0") [-g GROUP] [FILE]"
    echo "       $(basename "$0") [-m] [FILTERS] [DIRECTORY] "
    echo "       $(basename "$0") list [FILTERS] [DIRECTORY] "
}

open_file() {
  file="$1"
  group="$OPTARG"
  if [ -z "$file" ]; then
    echo "No file specified."
    exit 1
  fi
  if [ -n "$group" ]; then
    echo "$(realpath "$file");$(date +"%Y-%m-%d_%H-%M-%S");$group" >> "$MOLE_RC"
  else
    echo "$(realpath "$file");$(date +"%Y-%m-%d_%H-%M-%S")" >> "$MOLE_RC"
  fi
  
  if "$EDITOR" "$file"; then
    echo "File opened successfully."
    exit 0
  else
    echo "Error opening file."
    exit 1
  fi
}

mole() {
  group=""
  BEFORE=""
  AFTER=""
  most=false
  while getopts "g:a:b:m" opt; do
    case $opt in
      g)
        group=$OPTARG
        ;;
      a)
        BEFORE=$OPTARG
        ;;
      b)
        AFTER=$OPTARG
        ;;
      m) 
        most=true
        ;;
      *)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND-1))
  
  # Validate date format
  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    BEFORE=$(date -d "$BEFORE" +%s)
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi

  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    AFTER=$(date -d "$AFTER" +%s)
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi
  file=""
  
  # If no directory is specified, the current directory is assumed.
  if [ $# -eq 0 ]; then
    dir=$(pwd)
  else
    dir="$1"
  fi

  # If no filters are specified, list the most opened file.
  if [ -z "$group" ] && [ -z "$BEFORE" ] && [ -z "$AFTER" ]; then
    if [ $most = true ]; then
      file=$(awk -F ';' '{print $1}' "$MOLE_RC" | grep -E "^$dir/.*" | sort | uniq -c | sort -nr | head -n 1 | awk '{print $2}')
    elif [ $most = false ]; then
      file=$(awk -F ';' '{print $1}' "$MOLE_RC" | grep -E "^$dir/.*" | tail -n 1 | awk '{print $1}')
    fi

  else    
    # Apply filters to the file list.
    file_list=$(awk -v group="$group" -v BEFORE="$BEFORE" -v AFTER="$AFTER" '
      BEGIN {
        FS=";"
        OFS=";"
      }
      {
        if (group == "" || group == $3) {
          if (BEFORE == "" || BEFORE >= $2) {
            if (AFTER == "" || AFTER <= $2) {
              print $1
            }
          }
        }
      }' "$MOLE_RC" | grep -E "^$dir/.*" | sort | uniq -c | sort -rn)
    # Find the file that matches the filter and has been opened the most number of times.
    if [ $most = true ]; then
      file=$(echo "$file_list" | head -n 1 | awk '{ print $2 }')
    # Find the file that matches the filter and has been opened the last time.
    elif [ $most = false ]; then
      file=$(echo "$file_list" | tail -n 1 | awk '{ print $2 }')
    fi
  fi

  # If no file is found, exit with error.
  if [ -n "$file" ]; then
    if [ -f "$file" ]; then
      open_file "$file"
    else
      echo "File not found: $file"
      exit 1
    fi
  else
    echo "No files found."
    exit 1
  fi
}

# Function to list files opened (edited) in the given directory
list_files() {
    group=""
    BEFORE=""
    AFTER=""
    while getopts "g:a:b:" opt; do
      case $opt in
        g) group="$OPTARG" ;;
        b) BEFORE="$OPTARG" ;;
        a) AFTER="$OPTARG" ;;
        *) echo "Invalid option: -$OPTARG" >&2 
           exit 1 ;;
      esac
    done
    shift $((OPTIND-1))

    if [ $# -eq 0 ]; then
      dir=$(pwd)
    else
      dir="$1"
    fi

    if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
      BEFORE=$(date -d "$BEFORE" +%s)
    elif [ -n "$BEFORE" ]; then
      echo "Invalid date format for -a" >&2
      exit 1
    fi

    if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
      AFTER=$(date -d "$AFTER" +%s)
    elif [ -n "$AFTER" ]; then
      echo "Invalid date format for -b" >&2
      exit 1
    fi

    # Group files by name and concatenate their groups
    file_list=$(awk -v group="$group" -v BEFORE="$BEFORE" -v AFTER="$AFTER" -v dir="$dir" '
      BEGIN {
        FS=";"
        OFS=";"
      }
      {
        if (group == "" || group == $3) {
          if (BEFORE == "" || BEFORE >= $2) {
            if (AFTER == "" || AFTER <= $2) {
              print $1, $3
            }
          }
        }   
      }' "$MOLE_RC" | grep -E "^$dir/.*" | sort)
#files[$1] = files[$1] $3 " "

    echo "$file_list"
  }

secret_log() {
    # Parse command line arguments
    BEFORE="" AFTER="" DIRS=""
    LOG_DIR="$HOME/.mole"
    mkdir -p "$LOG_DIR" || { echo "Error: Could not create log directory" >&2; return 1; }

    while getopts ":a:b:" opt; do
        case ${opt} in
            a) AFTER="$OPTARG" 
            ;;
            b) BEFORE="$OPTARG" 
            ;;
            *) if [ -d "$OPTARG" ]; then 
            DIRS="$OPTARG" 
            fi
            ;; 
        esac
    done
    shift $((OPTIND -1))

    file_log=$(awk -v group="$group" -v BEFORE="$BEFORE" -v AFTER="$AFTER" '

      {        
          if (BEFORE == "" || BEFORE >= $2) {
            if (AFTER == "" || AFTER <= $2) {
              print $1
            }
          }
        
      }' "$MOLE_RC" | grep -E "^$dir/.*" | sort | sort -rn)
      echo "$file_log"
      #pizdec blyat
      bzip2 -c "$file_log" >> "log_$(whoami)_$(date +%Y-%m-%d_%H-%M-%S).bz2"
}


if [ ! -f "$MOLE_RC" ]; then
  echo "No mole_rc file found."
  exit 1
fi
if [ "$1" = "list" ]; then
  shift
  list_files "$@"
  exit 0 
elif [ "$1" = "secret-log" ]; then
  shift
  secret_log "$@" 
  exit 0
elif [ -n "$1" ]; then
  if [ "$1" = "-m" ]; then
  mole "$@"
  fi
  while getopts "g:h" opt; do
  case $opt in
    h)
      usage
      exit 0
      ;;
    g)
      open_file "$3" "$OPTARG" 
      ;;
    \?)
      echo "Invalid option" >&2
      exit 1
      ;;
  esac
  done
  if [ -d "$1" ]; then
    mole "$@"
  else 
  open_file "$@" 
  fi
else
  open_file "$@"
fi
