#!/bin/sh
#xonufr00 Ivan Onufriienko
export POSIXLY_CORRECT=yes
export LC_ALL=C
# Constants
# The path to the configuration file
MOLE_RC="$HOME/.mole_rc"
# The default editor to use if no editor is specified in the environment variables EDITOR or VISUAL 
EDITOR="${EDITOR:-${VISUAL:-vi}}"
# Check if the realpath utility is available on the machine, exit if not
command -v realpath >/dev/null 2>&1 || { echo >&2 "The realpath utility is not available on this machine."; exit 1; }
# Display the usage of the script
usage(){
    echo "Usage: $(basename "$0") [-h]"
    echo "       $(basename "$0") [-g GROUP] [FILE]"
    echo "       $(basename "$0") [-m] [FILTERS] [DIRECTORY] "
    echo "       $(basename "$0") list [FILTERS] [DIRECTORY] "
}
# Define the function for opening a file in the editor
open_file() {
  file="$(realpath "$1")"
  dir="$(dirname "$1")"
  group="$OPTARG"
# Exit if no file is specified
  if [ -z "$file" ]; then
    echo "No file specified."
    exit 1
  fi
# If a group is specified, add the file to the configuration file with the group, else add it without a group
  if [ -n "$group" ]; then
    echo "$(realpath "$file");$(date +"%Y-%m-%d_%H-%M-%S");$group;$dir" >> "$MOLE_RC"
  else
    echo "$(realpath "$file");$(date +"%Y-%m-%d_%H-%M-%S");;$dir" >> "$MOLE_RC"
  fi
# Open the file in the editor, exit with a success code if successful, else exit with an error code
  if "$EDITOR" "$file"; then
    exit 0
  else
    echo "Error opening file."
    exit 1
  fi
}
# Define the function for searching for files in the configuration file
mole() {
  group=""
  BEFORE=""
  AFTER=""
  most=false
  file=""
# Parse the command line options
  while getopts "a:b:mg:" opt; do
    case $opt in
      g) group=$OPTARG ;;
      a) BEFORE=$OPTARG ;;
      b) AFTER=$OPTARG ;;
      m) most=true ;;
      *) echo "Invalid option: -$OPTARG" >&2
        exit 1 ;;
    esac
  done
  shift $((OPTIND-1))
# Convert the BEFORE and AFTER date strings to the date format used by date 
  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    BEFORE=$(date -d "$BEFORE" +%F)
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi
  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    AFTER=$(date -d "$AFTER" +%F)
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi
# If no directory is specified, use the current directory, else use the specified directory  
  if [ $# -eq 0 ]; then
    dir=$(pwd)
  else
    dir="$(realpath "$1")"
  fi
# Search for files in the configuration file, sort them by the number of times they have been opened, and open the most recently opened file  
  file_list=$(awk -v groups="$group" -v BEFORE="$BEFORE" -v AFTER="$AFTER" -v dir="$dir" '
  BEGIN {
    FS=";"
    OFS=";"
    split(groups, group_array, ",")
    for (i in group_array) {
      group_map[group_array[i]] = 1
    }
  }
  { 
    if (dir == "" || dir == $4) {
      if (($3 in group_map) || (groups == "")) {
        if (BEFORE == "" || BEFORE >= $2) {
          if (AFTER == "" || AFTER <= $2) {
            print $1
          }
        }
      }
    }
  } ' "$MOLE_RC" | sort | uniq -c | sort -rn )
# If the most recently opened file is to be opened, open the first file in the list, else open the last file in the list
  echo "$file_list"
  if [ $most = true ]; then
    file=$(echo "$file_list" | head -n 1 | awk '{ print $2 }')
  elif [ $most = false ]; then
    file=$(echo "$file_list" | tail -1 | awk '{ print $2 }')
  fi
# If a file is found, open it, else exit with an error code
  if [ -n "$file" ]; then
    if [ -f "$file" ]; then
      open_file "$file"
    else
      mole "$file"
    fi
  else
    echo "No files found."
    exit 1
  fi
}
# Define the function for listing files in the configuration file
list_files() {
  group=""
  BEFORE=""
  AFTER=""
  while getopts "g:a:b:" opt; do
    case $opt in
      g) group="$OPTARG" ;;
      b) BEFORE="$OPTARG" ;;
      a) AFTER="$OPTARG" ;;
      *) echo "Invalid option: -$OPTARG" >&2 
         exit 1 ;;
    esac
  done
  shift $((OPTIND-1))
# If no directory is specified, use the current directory, else use the specified directory
  if [ $# -eq 0 ]; then
    dir="$(pwd)"
  else
    dir="$(realpath "$1")"
  fi
# Convert the BEFORE and AFTER date strings to the date format used by date
  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    BEFORE=$(date -d "$BEFORE" +%F)
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi
  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    AFTER=$(date -d "$AFTER" +%F)
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi
# Save the configuration file to a variable, sort it by the number of times it has been opened, and print the list of files
  virgin_rc=$(cat "$MOLE_RC") 
  sorted_rc=$(awk -F';' '{print $4,$3,$2,$1}' "$MOLE_RC" | sort | awk '{print $4";"$3";"$2";"$1}')
  echo "$sorted_rc" | sed 's/^;//' > "$MOLE_RC"
# Search for files in the configuration file and print them
  file_list=$( awk -v group="$group" -v BEFORE="$BEFORE" -v AFTER="$AFTER" -v dir="$dir" '
    BEGIN {
      FS=";"
      OFS=";"
      split(groups, group_array, ",")
      for (i in group_array) {
        group_map[group_array[i]] = 1
      }
    }
    {
    if (dir == "" || dir == $4){
      if (($3 in group_map) || (groups == "")) {
        if (BEFORE == "" || BEFORE >= $2) {
          if (AFTER == "" || AFTER <= $2) {
            if (!(files[$1] ~ "(^|,)" $3 "($|,)")) {
              if (files[$1] == "") {
                files[$1] = $3
              } else {
                files[$1] = files[$1] "," $3
              }
              for (file in files) {
                cmd = "basename \"" file "\""
                cmd | getline basename
                close(cmd)
                if (indent < length(basename)) {
                  indent = length(basename)+1
                }
              }
            }
          }
        }
      }
    }
    }
    END {
      for (file in files) {
        cmd = "basename \"" file "\""
        cmd | getline basename
        close(cmd)
        printf "%s:%*s%s\n", basename, indent - length(basename) , "", files[file] == "" ? "-" : files[file] 
      }
    }' "$MOLE_RC" )

  echo "$virgin_rc" > "$MOLE_RC"
  echo "$file_list"
}
# Define the function for logging files
secret_log() {
  BEFORE="" AFTER="" DIR=""
  LOG_DIR="$HOME/.mole"
  mkdir -p "$LOG_DIR" || { echo "Error: Could not create log directory" >&2; exit 1; }
  virgin_rc=$(cat "$MOLE_RC") 
  while getopts ":a:b:" opt; do
      case ${opt} in
          a) AFTER="$OPTARG" ;;
          b) BEFORE="$OPTARG" ;;
          *) echo "Invalid option: -$OPTARG" >&2
              exit 1 ;; 
      esac
  done
  shift $((OPTIND -1))
# Looping through the all directories
  for arg in "$@"; do
    if [ -d "$arg" ]; then
      DIR="$(realpath "$arg")"
    fi
# Convert the BEFORE and AFTER date strings to the date format used by date
  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-2]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}$' > /dev/null; then
    BEFORE=$(echo "$BEFORE" )
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi
  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-2]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}$' > /dev/null; then
    AFTER=$(echo "$AFTER" )
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi
# Sorting the configuration file 
  almost_sorted_rc=$(awk -v BEFORE="$BEFORE" -v AFTER="$AFTER" -v dir="$DIR" '
  BEGIN {
    FS=";"
    OFS=";"
  }
  { 
  if (dir == "" || dir == $4){  
    if (BEFORE == "" || BEFORE >= $2) {
      if (AFTER == "" || AFTER <= $2) {
        print $1,$2
      }
    }
  }
  }' "$MOLE_RC"  | sort )
  if [ -z "$sorted_rc" ]; then
    sorted_rc="$almost_sorted_rc"
  else
    sorted_rc="$sorted_rc
$almost_sorted_rc"
  fi
  done
# Pasting the sorted configuration file back to the original configuration file  
  echo "$sorted_rc" | sed 's/^;//' > "$MOLE_RC" 
  FILES=$(cut -d';' -f1 "$MOLE_RC" | sort -u)
# Creating a log file and saving the file paths and the dates when they have been opened  
  LOG_FILE="$LOG_DIR/log_$(whoami)_$(date +%Y-%m-%d_%H-%M-%S)"
  printf "%s\n" "$FILES" | while read -r FILE; do
      FILE_PATH="$FILE"
      FILE_OPEN_TIMES=$(grep "^$FILE_PATH;" "$MOLE_RC" | cut -d';' -f2- | cut -d';' -f1 | tr '\n' ';' | sed 's/;$//')
      printf "%s;%s\n" "$FILE_PATH" "$FILE_OPEN_TIMES" >> "$LOG_FILE"
  done
  echo "$virgin_rc" > "$MOLE_RC"
  bzip2 "$LOG_FILE"
}
# Checking if the configuration file exists
if [ ! -f "$MOLE_RC" ]; then
  echo "No mole_rc file found." >&2
  exit 1
fi
# Calling list function
if [ "$1" = "list" ]; then
  shift
  list_files "$@"
  exit 0 
# Calling secret-log function
elif [ "$1" = "secret-log" ]; then
  shift
  secret_log "$@" 
  exit 0
# Calling the rest functions
elif [ -n "$1" ]; then
  if [ "$1" = "-m" ] || [ -d "$1" ]; then
    mole "$@"
  fi
  while getopts "g:ha:b:" opt; do
  case $opt in
    h) usage
      exit 0 ;;
    g) if [ -d "$3" ]; then
    mole "$@"
    elif [ "$3" != "" ]; then 
    open_file "$3"
    else
    mole "$@"
    fi ;;
    a) mole "$@" ;;
    b) mole "$@" ;;
    \?) echo "Invalid option" >&2
        exit 1 ;;
  esac
  done
  open_file "$@"
else
  mole 
fi
