#!/bin/sh
#xonufr00 Ivan Onufriienko
export POSIXLY_CORRECT=yes
export LC_ALL=C
# Constants
MOLE_RC="$HOME/.mole_rc"
EDITOR="${EDITOR:-${VISUAL:-vi}}"

command -v realpath >/dev/null 2>&1 || { echo >&2 "The realpath utility is not available on this machine."; exit 1; }

usage(){
    echo "Usage: $(basename "$0") [-h]"
    echo "       $(basename "$0") [-g GROUP] [FILE]"
    echo "       $(basename "$0") [-m] [FILTERS] [DIRECTORY] "
    echo "       $(basename "$0") list [FILTERS] [DIRECTORY] "
}

open_file() {
  file="$1"
  group="$OPTARG"

  if [ -z "$file" ]; then
    echo "No file specified."
    exit 1
  fi

  if [ -n "$group" ]; then
    echo "$(realpath "$file");$(date +"%Y-%m-%d_%H-%M-%S");$group;$(dirname "$(realpath "file")")" >> "$MOLE_RC"
  else
    echo "$(realpath "$file");$(date +"%Y-%m-%d_%H-%M-%S");;$(dirname "$(realpath "file")")" >> "$MOLE_RC"
  fi
  
  if "$EDITOR" "$file"; then
    exit 0
  else
    echo "Error opening file."
    exit 1
  fi
}

mole() {
  group=""
  BEFORE=""
  AFTER=""
  most=false

  while getopts "g:a:b:m" opt; do
    case $opt in
      g) groups=$OPTARG ;;
      a) BEFORE=$OPTARG ;;
      b) AFTER=$OPTARG ;;
      m) most=true ;;
      *) echo "Invalid option: -$OPTARG" >&2
        exit 1 ;;
    esac
  done
  shift $((OPTIND-1))
  for g in $(echo "$group" | tr ',' ' '); do
    groups="$groups $g"
  done
  groups=${groups# }
  
  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    BEFORE=$(date -d "$BEFORE" +%F)
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi

  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    AFTER=$(date -d "$AFTER" +%F)
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi
  file=""
  
  if [ $# -eq 0 ]; then
    dir=$(pwd)
  else
    dir="$1"
  fi
   
  if [ -z "$group" ] && [ -z "$BEFORE" ] && [ -z "$AFTER" ]; then
    if [ $most = true ]; then
      file=$(awk -F ';' '{print $1}' "$MOLE_RC" | grep -E "^${dir}/.*" | sort | uniq -c | sort -nr | head -n 1 | awk '{print $2}')
    elif [ $most = false ]; then
      file=$(awk -F ';' '{print $1}' "$MOLE_RC" | grep -E "^${dir}/.*" | tail -n 1 | awk '{print $1}')
    fi

  else    

    file_list=$(awk -v groups="$groups" -v BEFORE="$BEFORE" -v AFTER="$AFTER" -v dir="$dir"'
  BEGIN {
    FS=";"
    OFS=";"
  }
  { 
  if (dir == "" || dir == $4){
    if (groups == "" || groups == $3) {
      if (BEFORE == "" || BEFORE >= $2) {
        if (AFTER == "" || AFTER <= $2) {
          print $1
        }
      }
    }
    }
  }
  }' "$MOLE_RC" | sort | uniq -c | sort -rn )
    if [ $most = true ]; then
      file=$(echo "$file_list" | head -n 1 | awk '{ print $2 }')
    elif [ $most = false ]; then
      file=$(echo "$file_list" | tail -n 1 | awk '{ print $2 }')
    fi
  fi

  if [ -n "$file" ]; then
    if [ -f "$file" ]; then
      open_file "$file"
    else
      mole "$file"
    fi
  else
    echo "No files found."
    exit 1
  fi
}

list_files() {
  group=""
  BEFORE=""
  AFTER=""
  while getopts "g:a:b:" opt; do
    case $opt in
      g) group="$OPTARG" ;;
      b) BEFORE="$OPTARG" ;;
      a) AFTER="$OPTARG" ;;
      *) echo "Invalid option: -$OPTARG" >&2 
         exit 1 ;;
    esac
  done
  shift $((OPTIND-1))

  if [ $# -eq 0 ]; then
    dir="$(pwd)"
  else
    dir="$1"
  fi

  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    BEFORE=$(date -d "$BEFORE" +%F)
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi

  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$' > /dev/null; then
    AFTER=$(date -d "$AFTER" +%F)
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi
  virgin_rc=$(cat "$MOLE_RC") 
  sorted_rc=$(awk -F';' '{print $4,$3,$2,$1}' "$MOLE_RC" | sort | awk '{print $4";"$3";"$2";"$1}')
  echo "$sorted_rc" | sed 's/^;//' > "$MOLE_RC"

file_list=$( awk -v group="$group" -v BEFORE="$BEFORE" -v AFTER="$AFTER" -v dir="$dir" '
  BEGIN {
    FS=";"

  }
  {
  if (dir == "" || dir == $4){
    if (group == "" || group == $3) {
      if (BEFORE == "" || BEFORE >= $2) {
        if (AFTER == "" || AFTER <= $2) {
          if (!(files[$1] ~ "(^|,)" $3 "($|,)")) {
            if (files[$1] == "") {
              files[$1] = $3
            } else {
              files[$1] = files[$1] "," $3
            }
            for (file in files) {
              cmd = "basename \"" file "\""
              cmd | getline basename
              close(cmd)
              if (indent < length(basename)) {
                indent = length(basename)+1
              }
            }
          }
        }
      }
    }
  }
  }
  END {
    for (file in files) {
      cmd = "basename \"" file "\""
      cmd | getline basename
      close(cmd)
      printf "%s:%*s%s\n", basename, indent - length(basename) , "", files[file] == "" ? "-" : files[file] 
    }
  }' "$MOLE_RC" )

  echo "$virgin_rc" > "$MOLE_RC"
echo "$file_list"
}



secret_log() {
  BEFORE="" AFTER="" DIR=""
  LOG_DIR="$HOME/.mole"
  mkdir -p "$LOG_DIR" || { echo "Error: Could not create log directory" >&2; exit 1; }

  while getopts ":a:b:" opt; do
      case ${opt} in
          a) AFTER="$OPTARG" ;;
          b) BEFORE="$OPTARG" ;;
          *) if [ -d "$OPTARG" ]; then 
              DIR="$OPTARG" 
             else 
              echo "Invalid option: -$OPTARG" >&2
              exit 1
             fi ;; 
      esac
  done
  shift $((OPTIND -1))

  if expr "$BEFORE" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-2]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}$' > /dev/null; then
    BEFORE=$(echo "$BEFORE" )
  elif [ -n "$BEFORE" ]; then
    echo "Invalid date format for -b" >&2
    exit 1
  fi

  if expr "$AFTER" : '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-2]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}-[0-6]\{1\}[0-9]\{1\}$' > /dev/null; then
    AFTER=$(echo "$AFTER" )
  elif [ -n "$AFTER" ]; then
    echo "Invalid date format for -a" >&2
    exit 1
  fi

  virgin_rc=$(cat "$MOLE_RC") 
  sorted_rc=$(awk -v BEFORE="$BEFORE" -v AFTER="$AFTER" '
  BEGIN {
    FS=";"
    OFS=";"
  }
  { 
  if (dir == "" || dir == $4){  
    if (BEFORE == "" || BEFORE >= $2) {
      if (AFTER == "" || AFTER <= $2) {
        print $1,$2
      }
    }
  }
  }' "$MOLE_RC"  | sort )
  echo "$sorted_rc" | sed 's/^;//' > "$MOLE_RC"
  FILES=$(cut -d';' -f1 "$MOLE_RC" | sort -u)
  
  LOG_FILE="$LOG_DIR/log_$(whoami)_$(date +%Y-%m-%d_%H-%M-%S)"
  printf "%s\n" "$FILES" | while read -r FILE; do
      FILE_PATH="$FILE"
      FILE_OPEN_TIMES=$(grep "^$FILE_PATH;" "$MOLE_RC" | cut -d';' -f2- | cut -d';' -f1 | tr '\n' ';' | sed 's/;$//')
      printf "%s;%s\n" "$FILE_PATH" "$FILE_OPEN_TIMES" >> "$LOG_FILE"
  done
  echo "$virgin_rc" > "$MOLE_RC"
  bzip2 "$LOG_FILE"
}

if [ ! -f "$MOLE_RC" ]; then
  echo "No mole_rc file found." >&2
  exit 1
fi

if [ "$1" = "list" ]; then
  shift
  list_files "$@"
  exit 0 

elif [ "$1" = "secret-log" ]; then
  shift
  secret_log "$@" 
  exit 0

elif [ -n "$1" ]; then
  if [ "$1" = "-m" ] || [ -d "$1" ]; then
    mole "$@"
  fi
  while getopts "g:ha:b:" opt; do
  case $opt in
    h) usage
      exit 0 ;;
    g) if [ -d "$3" ]; then
    mole "$@"
    elif [ "$3" != "" ]; then 
    open_file "$3"
    else
    mole "$@"
    fi ;;
    a) mole "$@" ;;
    b) mole "$@" ;;
    \?) echo "Invalid option" >&2
        exit 1 ;;
  esac
  done
  open_file "$@"
else
  mole 
fi
